// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* Ancillary data structure used for instrumentation.
   Line instrumentation creates this with sufficient
   space for one entry per code unit. The total size
   of the data will be `bytes_per_entry * Py_SIZE(code)` */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _PyCoLineInstrumentationData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _PyCoLineInstrumentationData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _PyCoLineInstrumentationData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _PyCoLineInstrumentationData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _PyCoLineInstrumentationData position(long position) {
        return (_PyCoLineInstrumentationData)super.position(position);
    }
    @Override public _PyCoLineInstrumentationData getPointer(long i) {
        return new _PyCoLineInstrumentationData((Pointer)this).offsetAddress(i);
    }

    public native @Cast("uint8_t") byte bytes_per_entry(); public native _PyCoLineInstrumentationData bytes_per_entry(byte setter);
    public native @Cast("uint8_t") byte data(int i); public native _PyCoLineInstrumentationData data(int i, byte setter);
    @MemberGetter public native @Cast("uint8_t*") BytePointer data();
}
