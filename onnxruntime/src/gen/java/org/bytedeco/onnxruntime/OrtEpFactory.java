// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/**
 * \brief The OrtEpFactory provides functions to create and manage execution providers.
 * @since Version 1.22.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtEpFactory extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtEpFactory() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtEpFactory(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtEpFactory(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtEpFactory position(long position) {
        return (OrtEpFactory)super.position(position);
    }
    @Override public OrtEpFactory getPointer(long i) {
        return new OrtEpFactory((Pointer)this).offsetAddress(i);
    }

  /** \brief The ONNX Runtime version the execution provider was compiled with.
   *
   * Implementation should set to ORT_API_VERSION.
   * ORT will use this to ensure it does not call functions that were not available when the library was compiled.
   *
   * @since Version 1.22.
   */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtEpFactory ort_version_supported(int setter);

  /** \brief Get the name the of the execution provider that the factory creates.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return The name of the execution provider the factory creates.
   *
   * @since Version 1.22.
   */
  public static class GetName_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetName_OrtEpFactory(Pointer p) { super(p); }
      protected GetName_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call(@Const OrtEpFactory this_ptr);
  }
  public native GetName_OrtEpFactory GetName(); public native OrtEpFactory GetName(GetName_OrtEpFactory setter);

  /** \brief Get the name of vendor who owns the execution provider that the factory creates.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return vendor The vendor name of the execution provider the factory creates.
   *
   * @since Version 1.22.
   */
  public static class GetVendor_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetVendor_OrtEpFactory(Pointer p) { super(p); }
      protected GetVendor_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call(@Const OrtEpFactory this_ptr);
  }
  public native GetVendor_OrtEpFactory GetVendor(); public native OrtEpFactory GetVendor(GetVendor_OrtEpFactory setter);  // return EP vendor

  /** \brief Get information from the execution provider if it supports the OrtHardwareDevice.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   *                     Non-const as the factory is passed through to the CreateEp call via the OrtEpDevice.
   * @param devices [in] The OrtHardwareDevice instances that are available.
   * @param num_devices [in] The number of OrtHardwareDevice instances.
   * @param ep_devices [out] OrtEpDevice instances for each OrtHardwareDevice that the EP can use.
   *                        The implementation should call OrtEpApi::CreateEpDevice to create, and add the OrtEpDevice
   *                        instances to this pre-allocated array. ORT will take ownership of the values returned.
   *                        i.e. usage is {@code ep_devices[0] = <ptr to OrtEpDevice created with OrtEpApi::CreateEpDevice>;}
   * @param max_ep_devices [in] The maximum number of OrtEpDevices that can be added to ep_devices.
   *                           Current default is 8. This can be increased if needed.
   * @param num_ep_devices [out] The number of EP devices added to ep_devices.
   * @return true if the factory can create an execution provider that uses {@code device}.
   *
   * \note ORT will take ownership or ep_metadata and/or ep_options if they are not null.
   *
   * @since Version 1.22.
   */
  public static class GetSupportedDevices_OrtEpFactory_PointerPointer_long_PointerPointer_long_SizeTPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetSupportedDevices_OrtEpFactory_PointerPointer_long_PointerPointer_long_SizeTPointer(Pointer p) { super(p); }
      protected GetSupportedDevices_OrtEpFactory_PointerPointer_long_PointerPointer_long_SizeTPointer() { allocate(); }
      private native void allocate();
      public native OrtStatus call(OrtEpFactory this_ptr,
                                                  @Cast("const OrtHardwareDevice*const*") PointerPointer devices,
                                                  @Cast("size_t") long num_devices,
                                                  @Cast("OrtEpDevice**") PointerPointer ep_devices,
                                                  @Cast("size_t") long max_ep_devices,
                                                  @Cast("size_t*") SizeTPointer num_ep_devices);
  }
  public native GetSupportedDevices_OrtEpFactory_PointerPointer_long_PointerPointer_long_SizeTPointer GetSupportedDevices(); public native OrtEpFactory GetSupportedDevices(GetSupportedDevices_OrtEpFactory_PointerPointer_long_PointerPointer_long_SizeTPointer setter);

  /** \brief Function to create an OrtEp instance for use in a Session.
   *
   *  ORT will call ReleaseEp to release the instance when it is no longer needed.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param devices [in] The OrtHardwareDevice instances that the execution provider was selected to use.
   * @param ep_metadata_pairs [in] Execution provider metadata that was provided to OrtEpApi::CreateEpDevice, for each
   *                              device.
   * @param num_devices [in] The number of devices the execution provider was selected for.
   * @param session_options [in] The OrtSessionOptions instance that contains the configuration options for the
   *                            session. This will include ep_options from GetSupportedDevices as well as any
   *                            user provided overrides.
   *                            Execution provider options will have been added with a prefix of 'ep.<ep name>.'.
   *                            The OrtSessionOptions instance will NOT be valid after this call and should not be
   *                            stored for later use.
   * @param logger [in] The OrtLogger instance for the session that the execution provider should use for logging.
   * @param ep [out] The OrtEp instance created by the factory.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version <coming soon>. This is a placeholder.
   */
  public static class CreateEp_OrtEpFactory_PointerPointer_PointerPointer_long_OrtSessionOptions_OrtLogger_PointerPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    CreateEp_OrtEpFactory_PointerPointer_PointerPointer_long_OrtSessionOptions_OrtLogger_PointerPointer(Pointer p) { super(p); }
      protected CreateEp_OrtEpFactory_PointerPointer_PointerPointer_long_OrtSessionOptions_OrtLogger_PointerPointer() { allocate(); }
      private native void allocate();
      public native OrtStatus call(OrtEpFactory this_ptr,
                                       @Cast("const OrtHardwareDevice*const*") PointerPointer devices,
                                       @Cast("const OrtKeyValuePairs*const*") PointerPointer ep_metadata_pairs,
                                       @Cast("size_t") long num_devices,
                                       @Const OrtSessionOptions session_options,
                                       @Const OrtLogger logger, @Cast("OrtEp**") PointerPointer ep);
  }
  public native CreateEp_OrtEpFactory_PointerPointer_PointerPointer_long_OrtSessionOptions_OrtLogger_PointerPointer CreateEp(); public native OrtEpFactory CreateEp(CreateEp_OrtEpFactory_PointerPointer_PointerPointer_long_OrtSessionOptions_OrtLogger_PointerPointer setter);

  /** \brief Release the OrtEp instance.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param ep [in] The OrtEp instance to release.
   *
   * @since Version <coming soon>. This is a placeholder.
   */
  public static class ReleaseEp_OrtEpFactory_OrtEp extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    ReleaseEp_OrtEpFactory_OrtEp(Pointer p) { super(p); }
      protected ReleaseEp_OrtEpFactory_OrtEp() { allocate(); }
      private native void allocate();
      public native void call(OrtEpFactory this_ptr, OrtEp ep);
  }
  public native ReleaseEp_OrtEpFactory_OrtEp ReleaseEp(); public native OrtEpFactory ReleaseEp(ReleaseEp_OrtEpFactory_OrtEp setter);
}
