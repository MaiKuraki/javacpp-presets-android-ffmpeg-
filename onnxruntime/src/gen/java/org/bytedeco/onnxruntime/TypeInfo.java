// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** <summary>
 *  Type information that may contain either TensorTypeAndShapeInfo or
 *  the information about contained sequence or map depending on the ONNXType.
 *  </summary> */
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class TypeInfo extends TypeInfoImpl {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TypeInfo(Pointer p) { super(p); }


  /** Create an empty TypeInfo object, must be assigned a valid one to be used */
  /** C API Interop */
  public TypeInfo(OrtTypeInfo p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtTypeInfo p);

// #if !defined(ORT_MINIMAL_BUILD)
  public static native @ByVal TypeInfo CreateTensorInfo(@ByVal ConstTensorTypeAndShapeInfo tensor_info);
  public static native @ByVal TypeInfo CreateSparseTensorInfo(@ByVal ConstTensorTypeAndShapeInfo sparse_tensor_info);
  public static native @ByVal TypeInfo CreateSequenceTypeInfo(@ByVal @Cast("Ort::ConstTypeInfo*") TypeInfoImpl sequence_type);
  public static native @ByVal TypeInfo CreateMapTypeInfo(@Cast("ONNXTensorElementDataType") int key_type, @ByVal @Cast("Ort::ConstTypeInfo*") TypeInfoImpl value_type);
  public static native @ByVal TypeInfo CreateOptionalTypeInfo(@ByVal @Cast("Ort::ConstTypeInfo*") TypeInfoImpl contained_type);
// #endif  // !defined(ORT_MINIMAL_BUILD)

  public native @ByVal @Cast("Ort::ConstTypeInfo*") TypeInfoImpl GetConst();
}
