// Targeted by JavaCPP version 1.5.12: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Wrapper around ::OrtValueInfo
 *
 */
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class ValueInfo extends ValueInfoImpl {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ValueInfo(Pointer p) { super(p); }

  /** Take ownership of a pointer created by C API */
  public ValueInfo(OrtValueInfo p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtValueInfo p);

  // Create ValueInfo for a tensor
  public ValueInfo(@StdString BytePointer name, @Cast("const Ort::ConstTypeInfo*") @ByRef TypeInfoImpl type_info) { super((Pointer)null); allocate(name, type_info); }
  private native void allocate(@StdString BytePointer name, @Cast("const Ort::ConstTypeInfo*") @ByRef TypeInfoImpl type_info);
  public ValueInfo(@StdString String name, @Cast("const Ort::ConstTypeInfo*") @ByRef TypeInfoImpl type_info) { super((Pointer)null); allocate(name, type_info); }
  private native void allocate(@StdString String name, @Cast("const Ort::ConstTypeInfo*") @ByRef TypeInfoImpl type_info);

  public native @ByVal @Cast("Ort::ConstValueInfo*") ValueInfoImpl GetConst();
}
