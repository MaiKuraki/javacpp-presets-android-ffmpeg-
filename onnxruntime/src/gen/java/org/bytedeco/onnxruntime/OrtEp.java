// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/**
 * \brief The OrtEp struct provides functions to implement for an execution provider.
 * @since Version 1.22.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtEp extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtEp() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtEp(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtEp(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtEp position(long position) {
        return (OrtEp)super.position(position);
    }
    @Override public OrtEp getPointer(long i) {
        return new OrtEp((Pointer)this).offsetAddress(i);
    }

  /** \brief The ONNX Runtime version the execution provider was compiled with.
   *
   * Implementation should set to ORT_API_VERSION.
   * ORT will use this to ensure it does not call functions that were not available when the library was compiled.
   *
   * @since Version 1.22.
   */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtEp ort_version_supported(int setter);

  /** \brief Get the execution provider name.
   *
   * @param this_ptr [in] The OrtEp instance.
   * @return The execution provider name.
   *
   * \note Returned string is owned by ORT and valid until UnregisterExecutionProviderLibrary is called.
   *
   * @since Version 1.22.
   */
  public static class GetName_OrtEp extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetName_OrtEp(Pointer p) { super(p); }
      protected GetName_OrtEp() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call(@Const OrtEp this_ptr);
  }
  public native GetName_OrtEp GetName(); public native OrtEp GetName(GetName_OrtEp setter);

  // OrtStatus* GetCapability(OrtEp* ep, const OrtGraph* graph,
  //                          size_t* num_supported_subgraphs,
  //                          OrtIndexedSubgraph** supported_subgraphs, OrtAllocator* allocator);

  // OrtStatus* Compile(OrtEp* ep, const OrtGraph** graphs, OrtNode** fused_graph_nodes,
  //                    size_t count, OrtNodeComputeInfo* node_compute_infos);

  // TODO: Implement OrtEpApi and the complete OrtEp interface as the next step.
}
