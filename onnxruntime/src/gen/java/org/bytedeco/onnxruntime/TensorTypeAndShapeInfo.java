// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Wrapper around ::OrtTensorTypeAndShapeInfo
 *
 */
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class TensorTypeAndShapeInfo extends TensorTypeAndShapeInfoImpl {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TensorTypeAndShapeInfo(Pointer p) { super(p); }


  /** Create an empty TensorTypeAndShapeInfo object, must be assigned a valid one to be used */
  /** Used for interop with the C API */
  public TensorTypeAndShapeInfo(OrtTensorTypeAndShapeInfo p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtTensorTypeAndShapeInfo p);

  // Create a TensorTypeAndShapeInfo object with the specified element type and dimensions
  // symbolic_dims are optional, but should be 1:1 with dims.
  // The value in symbolic_dims will be used for all entries in dims that are -1.
  public TensorTypeAndShapeInfo(@Cast("ONNXTensorElementDataType") int element_type,
                                    @Const @ByRef LongVector dims,
                                    @Const StringVector symbolic_dims/*=nullptr*/) { super((Pointer)null); allocate(element_type, dims, symbolic_dims); }
  private native void allocate(@Cast("ONNXTensorElementDataType") int element_type,
                                    @Const @ByRef LongVector dims,
                                    @Const StringVector symbolic_dims/*=nullptr*/);
  public TensorTypeAndShapeInfo(@Cast("ONNXTensorElementDataType") int element_type,
                                    @Const @ByRef LongVector dims) { super((Pointer)null); allocate(element_type, dims); }
  private native void allocate(@Cast("ONNXTensorElementDataType") int element_type,
                                    @Const @ByRef LongVector dims);

  public native @ByVal ConstTensorTypeAndShapeInfo GetConst();
}
