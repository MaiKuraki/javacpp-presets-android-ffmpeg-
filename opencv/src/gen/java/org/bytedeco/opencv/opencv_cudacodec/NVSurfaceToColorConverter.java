// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.opencv.opencv_cudacodec;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;

import static org.bytedeco.opencv.global.opencv_cudacodec.*;


/** \brief Class for converting the raw YUV Surface output from VideoReader if output color format is set to ColorFormat::NV_YUV_SURFACE_FORMAT (VideoReader::set(ColorFormat::NV_YUV_SURFACE_FORMAT)) to the requested \ref ColorFormat.
 */
@Namespace("cv::cudacodec") @Properties(inherit = org.bytedeco.opencv.presets.opencv_cudacodec.class)
public class NVSurfaceToColorConverter extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NVSurfaceToColorConverter(Pointer p) { super(p); }

    /** \brief Performs the conversion from the raw YUV Surface output from VideoReader to the requested color format. Use this function when you want to convert the raw YUV Surface output from VideoReader to more than one color format or you want both the raw Surface output in addition to a color frame.
     * @param yuv The raw YUV Surface output from VideoReader see \ref SurfaceFormat.
     * @param color The converted frame.
     * @param surfaceFormat The surface format of the input YUV data.
     * @param outputFormat The requested output color format.
     * @param bitDepth The requested bit depth of the output frame.
     * @param planar Request seperate planes for each color plane.
     * @param videoFullRangeFlag Indicates if the black level, luma and chroma of the source are represented using the full or limited range (AKA TV or "analogue" range) of values as defined in Annex E of the ITU-T Specification.
     * @param stream Stream for the asynchronous version.
     */
    public native @Cast("bool") boolean convert(@ByVal Mat yuv, @ByVal Mat color, @Cast("const cv::cudacodec::SurfaceFormat") int surfaceFormat, @Cast("const cv::cudacodec::ColorFormat") int outputFormat, @Cast("const cv::cudacodec::BitDepth") int bitDepth/*=cv::cudacodec::BitDepth::UNCHANGED*/, @Cast("const bool") boolean planar/*=false*/, @Cast("const bool") boolean videoFullRangeFlag/*=false*/, @ByRef(nullValue = "cv::cuda::Stream::Null()") Stream stream);
    public native @Cast("bool") boolean convert(@ByVal Mat yuv, @ByVal Mat color, @Cast("const cv::cudacodec::SurfaceFormat") int surfaceFormat, @Cast("const cv::cudacodec::ColorFormat") int outputFormat);
    public native @Cast("bool") boolean convert(@ByVal UMat yuv, @ByVal UMat color, @Cast("const cv::cudacodec::SurfaceFormat") int surfaceFormat, @Cast("const cv::cudacodec::ColorFormat") int outputFormat, @Cast("const cv::cudacodec::BitDepth") int bitDepth/*=cv::cudacodec::BitDepth::UNCHANGED*/, @Cast("const bool") boolean planar/*=false*/, @Cast("const bool") boolean videoFullRangeFlag/*=false*/, @ByRef(nullValue = "cv::cuda::Stream::Null()") Stream stream);
    public native @Cast("bool") boolean convert(@ByVal UMat yuv, @ByVal UMat color, @Cast("const cv::cudacodec::SurfaceFormat") int surfaceFormat, @Cast("const cv::cudacodec::ColorFormat") int outputFormat);
    public native @Cast("bool") boolean convert(@ByVal GpuMat yuv, @ByVal GpuMat color, @Cast("const cv::cudacodec::SurfaceFormat") int surfaceFormat, @Cast("const cv::cudacodec::ColorFormat") int outputFormat, @Cast("const cv::cudacodec::BitDepth") int bitDepth/*=cv::cudacodec::BitDepth::UNCHANGED*/, @Cast("const bool") boolean planar/*=false*/, @Cast("const bool") boolean videoFullRangeFlag/*=false*/, @ByRef(nullValue = "cv::cuda::Stream::Null()") Stream stream);
    public native @Cast("bool") boolean convert(@ByVal GpuMat yuv, @ByVal GpuMat color, @Cast("const cv::cudacodec::SurfaceFormat") int surfaceFormat, @Cast("const cv::cudacodec::ColorFormat") int outputFormat);
}
