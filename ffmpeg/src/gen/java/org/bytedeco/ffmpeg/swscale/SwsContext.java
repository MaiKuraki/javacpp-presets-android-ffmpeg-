// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ffmpeg.swscale;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.ffmpeg.avutil.*;
import static org.bytedeco.ffmpeg.global.avutil.*;

import static org.bytedeco.ffmpeg.global.swscale.*;


/***********************************
 * Context creation and management *
 ***********************************/

/**
 * Main external API structure. New fields can be added to the end with
 * minor version bumps. Removal, reordering and changes to existing fields
 * require a major version bump. sizeof(SwsContext) is not part of the ABI.
 */
@Properties(inherit = org.bytedeco.ffmpeg.presets.swscale.class)
public class SwsContext extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SwsContext() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SwsContext(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SwsContext(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SwsContext position(long position) {
        return (SwsContext)super.position(position);
    }
    @Override public SwsContext getPointer(long i) {
        return new SwsContext((Pointer)this).offsetAddress(i);
    }

    public native @Const AVClass av_class(); public native SwsContext av_class(AVClass setter);

    /**
     * Private data of the user, can be used to carry app specific stuff.
     */
    public native Pointer opaque(); public native SwsContext opaque(Pointer setter);

    /**
     * Bitmask of SWS_*. See {@code SwsFlags} for details.
     */
    public native @Cast("unsigned") int flags(); public native SwsContext flags(int setter);

    /**
     * Extra parameters for fine-tuning certain scalers.
     */
    public native double scaler_params(int i); public native SwsContext scaler_params(int i, double setter);
    @MemberGetter public native DoublePointer scaler_params();

    /**
     * How many threads to use for processing, or 0 for automatic selection.
     */
    public native int threads(); public native SwsContext threads(int setter);

    /**
     * Dither mode.
     */
    public native @Cast("SwsDither") int dither(); public native SwsContext dither(int setter);

    /**
     * Alpha blending mode. See {@code SwsAlphaBlend} for details.
     */
    public native @Cast("SwsAlphaBlend") int alpha_blend(); public native SwsContext alpha_blend(int setter);

    /**
     * Use gamma correct scaling.
     */
    public native int gamma_flag(); public native SwsContext gamma_flag(int setter);

    /**
     * Deprecated frame property overrides, for the legacy API only.
     *
     * Ignored by sws_scale_frame() when used in dynamic mode, in which
     * case all properties are instead taken from the frame directly.
     */
    /** Width and height of the source frame */
    public native int src_w(); public native SwsContext src_w(int setter);
    public native int src_h(); public native SwsContext src_h(int setter);
    /** Width and height of the destination frame */
    public native int dst_w(); public native SwsContext dst_w(int setter);
    public native int dst_h(); public native SwsContext dst_h(int setter);
    /** Source pixel format */
    public native int src_format(); public native SwsContext src_format(int setter);
    /** Destination pixel format */
    public native int dst_format(); public native SwsContext dst_format(int setter);
    /** Source is full range */
    public native int src_range(); public native SwsContext src_range(int setter);
    /** Destination is full range */
    public native int dst_range(); public native SwsContext dst_range(int setter);
    /** Source vertical chroma position in luma grid / 256 */
    public native int src_v_chr_pos(); public native SwsContext src_v_chr_pos(int setter);
    /** Source horizontal chroma position */
    public native int src_h_chr_pos(); public native SwsContext src_h_chr_pos(int setter);
    /** Destination vertical chroma position */
    public native int dst_v_chr_pos(); public native SwsContext dst_v_chr_pos(int setter);
    /** Destination horizontal chroma position */
    public native int dst_h_chr_pos(); public native SwsContext dst_h_chr_pos(int setter);

    /**
     * Desired ICC intent for color space conversions.
     */
    public native int intent(); public native SwsContext intent(int setter);

    /* Remember to add new fields to graph.c:opts_equal() */
}
