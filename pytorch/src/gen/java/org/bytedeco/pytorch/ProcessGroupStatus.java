// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


// A struct to hold the latest status of the process group.
@Namespace("c10d") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class ProcessGroupStatus extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ProcessGroupStatus() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ProcessGroupStatus(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ProcessGroupStatus(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ProcessGroupStatus position(long position) {
        return (ProcessGroupStatus)super.position(position);
    }
    @Override public ProcessGroupStatus getPointer(long i) {
        return new ProcessGroupStatus((Pointer)this).offsetAddress(i);
    }

  // the sequential number of the last collective enqueued into workMetaList_
  // This is useful for identifying a rank that has not join a collective
  // initialized to be -1 to indicate no collective has been enqueued
  public native @Cast("int64_t") long lastEnqueuedSeq(); public native ProcessGroupStatus lastEnqueuedSeq(long setter);
  // the sequential number of the last collective started as the kernel
  public native @Cast("int64_t") long lastStartedSeq(); public native ProcessGroupStatus lastStartedSeq(long setter);
  // the sequential number of the last collective completed marked by
  // the watchdog thread
  // initialized to be -1 to indicate no collective has been completed
  public native @Cast("int64_t") long lastCompletedSeq(); public native ProcessGroupStatus lastCompletedSeq(long setter);

  // the name of the last collective enqueued into workMetaList_
  public native @StdString BytePointer lastEnqueuedWorkName(); public native ProcessGroupStatus lastEnqueuedWorkName(BytePointer setter);
  // the name of the last collective started as the kernel
  public native @StdString BytePointer lastStartedWorkName(); public native ProcessGroupStatus lastStartedWorkName(BytePointer setter);
  // the name of the last collective completed
  public native @StdString BytePointer lastCompletedWorkName(); public native ProcessGroupStatus lastCompletedWorkName(BytePointer setter);

  // the sizes of the last work enqueued
  public native @Cast("size_t") long lastEnqueuedNumelIn(); public native ProcessGroupStatus lastEnqueuedNumelIn(long setter);
  public native @Cast("size_t") long lastEnqueuedNumelOut(); public native ProcessGroupStatus lastEnqueuedNumelOut(long setter);
  // the sizes of the last work completed
  public native @Cast("size_t") long lastCompletedNumelIn(); public native ProcessGroupStatus lastCompletedNumelIn(long setter);
  public native @Cast("size_t") long lastCompletedNumelOut(); public native ProcessGroupStatus lastCompletedNumelOut(long setter);
  // the sizes of the last work started
  public native @Cast("size_t") long lastStartedNumelIn(); public native ProcessGroupStatus lastStartedNumelIn(long setter);
  public native @Cast("size_t") long lastStartedNumelOut(); public native ProcessGroupStatus lastStartedNumelOut(long setter);
}
