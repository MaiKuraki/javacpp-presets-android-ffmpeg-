// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;

@NoOffset @Name("std::pair<size_t,std::optional<size_t> >") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SizeTSizeTOptionalPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SizeTSizeTOptionalPair(Pointer p) { super(p); }
    public SizeTSizeTOptionalPair(long firstValue, SizeTOptional secondValue) { this(); put(firstValue, secondValue); }
    public SizeTSizeTOptionalPair()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef SizeTSizeTOptionalPair put(@ByRef SizeTSizeTOptionalPair x);


    @MemberGetter public native @Cast("size_t") long first(); public native SizeTSizeTOptionalPair first(long first);
    @MemberGetter public native @ByRef SizeTOptional second();  public native SizeTSizeTOptionalPair second(SizeTOptional second);

    public SizeTSizeTOptionalPair put(long firstValue, SizeTOptional secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

