// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.onnx.global.onnx.*;


@Namespace("onnx") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class FunctionBuilder extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FunctionBuilder(Pointer p) { super(p); }

  public FunctionBuilder(@ByRef FunctionProto funProto_) { super((Pointer)null); allocate(funProto_); }
  private native void allocate(@ByRef FunctionProto funProto_);

  public native @ByRef FunctionBuilder Add(@Cast("const char*") BytePointer nodes_txt);
  public native @ByRef FunctionBuilder Add(String nodes_txt);

  public native @ByRef FunctionBuilder Add(@Cast("const char*") BytePointer node_txt, @Const @ByRef AttributeProto attr);
  public native @ByRef FunctionBuilder Add(String node_txt, @Const @ByRef AttributeProto attr);

  // Adds variable number of attributes to a node

  public native @ByRef FunctionBuilder Const(@StdString BytePointer name, @Const @ByRef TensorProto tensor);
  public native @ByRef FunctionBuilder Const(@StdString String name, @Const @ByRef TensorProto tensor);

  // Creates a scalar constant (a tensor of rank zero).

  // Creates a 1D tensor constant consisting of a single value.

  // Creates a 1D tensor constant consisting of zero or more values.

  public native @ByRef FunctionBuilder AddOpset(@Cast("const char*") BytePointer domain, int version);
  public native @ByRef FunctionBuilder AddOpset(String domain, int version);

  /**
   * \brief Adds an inlined call to a graph as a sequence of nodes in the function.
   *
   * This method effectively inlines the logic from the given graph into the function
   * being constructed. It:
   * - Adds a Constant node for every initializer in the graph
   * - Adds a copy of every node in the graph
   * - Renames formal input parameters to match actual inputs
   * - Renames formal output parameters to match actual outputs
   * - Renames all other intermediate values with a unique prefix
   * - Leaves references to undefined names (outer scope variables) unchanged
   *
   * @param outputs List of output variable names for the inlined call
   * @param graph The graph to inline
   * @param inputs List of input variable names for the inlined call
   * @param prefix Prefix to add to intermediate variable names for uniqueness
   * @return Reference to this FunctionBuilder for method chaining
   */
}
