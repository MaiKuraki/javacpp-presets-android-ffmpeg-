// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.onnx.global.onnx.*;

// -------------------------------------------------------------------

@Namespace("onnx") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class DeviceConfigurationProto extends MessageLite {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceConfigurationProto(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DeviceConfigurationProto(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DeviceConfigurationProto position(long position) {
        return (DeviceConfigurationProto)super.position(position);
    }
    @Override public DeviceConfigurationProto getPointer(long i) {
        return new DeviceConfigurationProto((Pointer)this).offsetAddress(i);
    }

  public DeviceConfigurationProto() { super((Pointer)null); allocate(); }
  private native void allocate();

  public DeviceConfigurationProto(@Const @ByRef DeviceConfigurationProto from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef DeviceConfigurationProto from);

  public native @ByRef @Name("operator =") DeviceConfigurationProto put(@Const @ByRef DeviceConfigurationProto from);

  public native @StdString BytePointer unknown_fields();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_unknown_fields();

  public static native @Const @ByRef DeviceConfigurationProto default_instance();
  public static native @Const DeviceConfigurationProto internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  
  public native void Swap(DeviceConfigurationProto other);
  public native void UnsafeArenaSwap(DeviceConfigurationProto other);

  // implements Message ----------------------------------------------

  public native DeviceConfigurationProto New(Arena arena/*=nullptr*/);
  public native DeviceConfigurationProto New();
  public native void CheckTypeAndMergeFrom(@Const @ByRef MessageLite from);
  public native void CopyFrom(@Const @ByRef DeviceConfigurationProto from);
  public native void MergeFrom(@Const @ByRef DeviceConfigurationProto from);
  public native void Clear();
  public native @Cast("bool") boolean IsInitialized();

  public native @Cast("size_t") long ByteSizeLong();
  public native @Cast("const char*") BytePointer _InternalParse(@Cast("const char*") BytePointer ptr, ParseContext ctx);
  public native String _InternalParse(String ptr, ParseContext ctx);
  public native int GetCachedSize();

  public native @StdString BytePointer GetTypeName();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  /** enum onnx::DeviceConfigurationProto:: */
  public static final int
    kDeviceFieldNumber = 3,
    kNameFieldNumber = 1,
    kNumDevicesFieldNumber = 2;
  // repeated string device = 3;
  public native int device_size();
  public native void clear_device();
  public native @StdString BytePointer device(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_device(int index);
  public native void set_device(int index, @StdString BytePointer value);
  public native void set_device(int index, @StdString String value);
  public native void set_device(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_device(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_device();
  public native void add_device(@StdString BytePointer value);
  public native void add_device(@StdString String value);
  public native void add_device(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_device(String value, @Cast("size_t") long size);

  // optional string name = 1;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  public native @StdString BytePointer name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional int32 num_devices = 2;
  public native @Cast("bool") boolean has_num_devices();
  public native void clear_num_devices();
  public native int num_devices();
  public native void set_num_devices(int value);
}
