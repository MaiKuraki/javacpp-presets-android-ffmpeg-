// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.onnx.global.onnx.*;

// -------------------------------------------------------------------

@Namespace("onnx") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class ShardingSpecProto extends MessageLite {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ShardingSpecProto(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ShardingSpecProto(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ShardingSpecProto position(long position) {
        return (ShardingSpecProto)super.position(position);
    }
    @Override public ShardingSpecProto getPointer(long i) {
        return new ShardingSpecProto((Pointer)this).offsetAddress(i);
    }

  public ShardingSpecProto() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ShardingSpecProto(@Const @ByRef ShardingSpecProto from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ShardingSpecProto from);

  public native @ByRef @Name("operator =") ShardingSpecProto put(@Const @ByRef ShardingSpecProto from);

  public native @StdString BytePointer unknown_fields();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_unknown_fields();

  public static native @Const @ByRef ShardingSpecProto default_instance();
  public static native @Const ShardingSpecProto internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  
  public native void Swap(ShardingSpecProto other);
  public native void UnsafeArenaSwap(ShardingSpecProto other);

  // implements Message ----------------------------------------------

  public native ShardingSpecProto New(Arena arena/*=nullptr*/);
  public native ShardingSpecProto New();
  public native void CheckTypeAndMergeFrom(@Const @ByRef MessageLite from);
  public native void CopyFrom(@Const @ByRef ShardingSpecProto from);
  public native void MergeFrom(@Const @ByRef ShardingSpecProto from);
  public native void Clear();
  public native @Cast("bool") boolean IsInitialized();

  public native @Cast("size_t") long ByteSizeLong();
  public native @Cast("const char*") BytePointer _InternalParse(@Cast("const char*") BytePointer ptr, ParseContext ctx);
  public native String _InternalParse(String ptr, ParseContext ctx);
  public native int GetCachedSize();

  public native @StdString BytePointer GetTypeName();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  /** enum onnx::ShardingSpecProto:: */
  public static final int
    kDeviceFieldNumber = 2,
    kIndexToDeviceGroupMapFieldNumber = 3,
    kShardedDimFieldNumber = 4,
    kTensorNameFieldNumber = 1;
  // repeated int64 device = 2;
  public native int device_size();
  public native void clear_device();
  public native @Cast("int64_t") long device(int index);
  public native void set_device(int index, @Cast("int64_t") long value);
  public native void add_device(@Cast("int64_t") long value);

  // repeated .onnx.IntIntListEntryProto index_to_device_group_map = 3;
  public native int index_to_device_group_map_size();
  public native void clear_index_to_device_group_map();
  public native IntIntListEntryProto mutable_index_to_device_group_map(int index);
  public native @Const @ByRef IntIntListEntryProto index_to_device_group_map(int index);
  public native IntIntListEntryProto add_index_to_device_group_map();

  // repeated .onnx.ShardedDimProto sharded_dim = 4;
  public native int sharded_dim_size();
  public native void clear_sharded_dim();
  public native ShardedDimProto mutable_sharded_dim(int index);
  public native @Const @ByRef ShardedDimProto sharded_dim(int index);
  public native ShardedDimProto add_sharded_dim();

  // optional string tensor_name = 1;
  public native @Cast("bool") boolean has_tensor_name();
  public native void clear_tensor_name();
  public native @StdString BytePointer tensor_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_tensor_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_tensor_name();
  public native void set_allocated_tensor_name(@StdString @Cast({"char*", "std::string*"}) BytePointer tensor_name);
}
