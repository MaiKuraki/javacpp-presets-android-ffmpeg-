// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.onnx.global.onnx.*;

// -------------------------------------------------------------------

@Namespace("onnx") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class NodeDeviceConfigurationProto extends MessageLite {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NodeDeviceConfigurationProto(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NodeDeviceConfigurationProto(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NodeDeviceConfigurationProto position(long position) {
        return (NodeDeviceConfigurationProto)super.position(position);
    }
    @Override public NodeDeviceConfigurationProto getPointer(long i) {
        return new NodeDeviceConfigurationProto((Pointer)this).offsetAddress(i);
    }

  public NodeDeviceConfigurationProto() { super((Pointer)null); allocate(); }
  private native void allocate();

  public NodeDeviceConfigurationProto(@Const @ByRef NodeDeviceConfigurationProto from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef NodeDeviceConfigurationProto from);

  public native @ByRef @Name("operator =") NodeDeviceConfigurationProto put(@Const @ByRef NodeDeviceConfigurationProto from);

  public native @StdString BytePointer unknown_fields();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_unknown_fields();

  public static native @Const @ByRef NodeDeviceConfigurationProto default_instance();
  public static native @Const NodeDeviceConfigurationProto internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  
  public native void Swap(NodeDeviceConfigurationProto other);
  public native void UnsafeArenaSwap(NodeDeviceConfigurationProto other);

  // implements Message ----------------------------------------------

  public native NodeDeviceConfigurationProto New(Arena arena/*=nullptr*/);
  public native NodeDeviceConfigurationProto New();
  public native void CheckTypeAndMergeFrom(@Const @ByRef MessageLite from);
  public native void CopyFrom(@Const @ByRef NodeDeviceConfigurationProto from);
  public native void MergeFrom(@Const @ByRef NodeDeviceConfigurationProto from);
  public native void Clear();
  public native @Cast("bool") boolean IsInitialized();

  public native @Cast("size_t") long ByteSizeLong();
  public native @Cast("const char*") BytePointer _InternalParse(@Cast("const char*") BytePointer ptr, ParseContext ctx);
  public native String _InternalParse(String ptr, ParseContext ctx);
  public native int GetCachedSize();

  public native @StdString BytePointer GetTypeName();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  /** enum onnx::NodeDeviceConfigurationProto:: */
  public static final int
    kShardingSpecFieldNumber = 2,
    kConfigurationIdFieldNumber = 1,
    kPipelineStageFieldNumber = 3;
  // repeated .onnx.ShardingSpecProto sharding_spec = 2;
  public native int sharding_spec_size();
  public native void clear_sharding_spec();
  public native ShardingSpecProto mutable_sharding_spec(int index);
  public native @Const @ByRef ShardingSpecProto sharding_spec(int index);
  public native ShardingSpecProto add_sharding_spec();

  // optional string configuration_id = 1;
  public native @Cast("bool") boolean has_configuration_id();
  public native void clear_configuration_id();
  public native @StdString BytePointer configuration_id();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_configuration_id();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_configuration_id();
  public native void set_allocated_configuration_id(@StdString @Cast({"char*", "std::string*"}) BytePointer configuration_id);

  // optional int32 pipeline_stage = 3;
  public native @Cast("bool") boolean has_pipeline_stage();
  public native void clear_pipeline_stage();
  public native int pipeline_stage();
  public native void set_pipeline_stage(int value);
}
