// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;


/** Parameters for blockwise quantization across the output channels dimension.
 *  For a particular value in quantized_dimension, quantized values can be
 *  converted back to float using:
 *      {@code real_value = scale * (quantized_value - zero_point)} */
@Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class TfLiteBlockwiseQuantization extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TfLiteBlockwiseQuantization() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TfLiteBlockwiseQuantization(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TfLiteBlockwiseQuantization(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TfLiteBlockwiseQuantization position(long position) {
        return (TfLiteBlockwiseQuantization)super.position(position);
    }
    @Override public TfLiteBlockwiseQuantization getPointer(long i) {
        return new TfLiteBlockwiseQuantization((Pointer)this).offsetAddress(i);
    }

  // Index of the tensor containing the scales.
  public native int scale(); public native TfLiteBlockwiseQuantization scale(int setter);
  // Index of the tensor containing the zero points.
  public native int zero_point(); public native TfLiteBlockwiseQuantization zero_point(int setter);
  // Quantization blocksize.
  public native int blocksize(); public native TfLiteBlockwiseQuantization blocksize(int setter);
  public native int quantized_dimension(); public native TfLiteBlockwiseQuantization quantized_dimension(int setter);
}
